// Mocks generated by Mockito 5.0.8 from annotations
// in bloc_dispose_scope/test/disposed_extensions/bloc_base_disposed_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i2;

import 'package:bloc/src/bloc.dart' as _i3;
import 'package:bloc/src/transition.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeStreamSubscription<T> extends _i1.Fake
    implements _i2.StreamSubscription<T> {}

/// A class which mocks [BlocBase].
///
/// See the documentation for Mockito's code generation for more information.
class MockBlocBase<State> extends _i1.Mock implements _i3.BlocBase<State> {
  MockBlocBase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  State get state =>
      (super.noSuchMethod(Invocation.getter(#state), returnValue: null)
          as State);
  @override
  _i2.Stream<State> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
          returnValue: Stream<State>.empty()) as _i2.Stream<State>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i2.StreamSubscription<State> listen(void Function(State)? onData,
          {Function? onError, void Function()? onDone, bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription<State>())
          as _i2.StreamSubscription<State>);
  @override
  void emit(State? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i4.Change<State>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i2.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future.value()) as _i2.Future<void>);
}
